{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchURL","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPOsition","orignal_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82bf3011.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios.js'\r\nimport './Row.css';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchURL, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchURL)\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchURL])\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url => {\r\n\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n\r\n    }\r\n\r\n    console.table(movies)\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {/* Row posters */}\r\n                {movies.map(movie => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={() => handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}\r\n                    alt={movie.name}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = 'e334e82fe807f4dcbdbaff76f2d4157b'\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests; ","\r\nimport React, { useState, useEffect } from 'react'\r\nimport axios from './axios.js';\r\nimport requests from './requests.js';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length)\r\n            ])\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n    }, []);\r\n    console.log(movie)\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n    }\r\n    return (\r\n\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPOsition: \"center center\",\r\n            }}>\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                {movie?.title || movie?.name || movie?.orignal_name}\r\n                    <div className=\"banner__buttons\">\r\n                        <button className=\"banner__button\">Play</button>\r\n                        <button className=\"banner__button\">My List</button>\r\n                    </div>\r\n\r\n                </h1>\r\n                <h1>\r\n                    <h1 className=\"banner__description\">\r\n                        {truncate(movie?.overview, 150)}\r\n                    </h1>\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"/>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useEffect, useState} from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n                let arr = [];\r\n            }\r\n            else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <div className=\"nav\">\r\n                <img\r\n                    className=\"nav__logo\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1024px-Netflix_2015_logo.svg.png\"\r\n                    alt=\"Netflix Logo\"\r\n                ></img>\r\n                <img \r\n                    className=\"profile__logo\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                    alt=\"Profile Logo\"\r\n                    ></img>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Row from './Row.js'\r\nimport requests from './requests.js'\r\nimport Banner from './Banner.js'\r\nimport Nav from './Nav.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Nav/>\r\n      <Banner/>\r\n      <Row \r\n        title=\"Netflix Originals\" \r\n        fetchURL={requests.fetchNetflixOriginals}\r\n        isLargeRow={true}\r\n      />\r\n      <Row title=\"Trending Now\" fetchURL={requests.fetchTrending}/>\r\n      <Row title=\"Top Rated\" fetchURL={requests.fetchTopRated}/>\r\n      <Row title=\"Action Movies\" fetchURL={requests.fetchActionMovies}/>\r\n      <Row title=\"Comedy Movies\" fetchURL={requests.fetchComedyMovies}/>\r\n      <Row title=\"Horror Movies\" fetchURL={requests.fetchHorrorMovies}/>\r\n      <Row title=\"Romance Movies\" fetchURL={requests.fetchRomanceMovies}/>\r\n      <Row title=\"Documentaries\" fetchURL={requests.fetchDocumentaries}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}